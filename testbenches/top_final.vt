// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "09/26/2018 17:33:02"
                                                                                
// Verilog Test Bench template for design : top_final
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 1 ps/ 1 ps
module top_final_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
wire [65:0] in0_m;
wire [32:0] in0_s;
wire [65:0] in1_m;
wire [32:0] in1_s;
reg reset;
// wires                                               
wire [32:0]  ans1;
wire [32:0]  ans2;
wire [65:0]  out0_m;
wire [65:0]  out1_m;

wire [31:0] rdata, addr, wdata, rdata2, addr2, wdata2;
wire [31:0] post_rdata, post_addr, post_wdata, post_rdata2, post_addr2, post_wdata2;
wire req, cmd, ack, req2, cmd2, ack2;
wire post_req, post_cmd, post_ack, post_req2, post_cmd2, post_ack2;

reg [31:0] t2_addr;
reg t2_cmd;
reg t2_req;
reg [31:0] t2_wdata;
reg [31:0] t_addr;
reg t_cmd;
reg t_req;
reg [31:0] t_wdata;

assign in0_m = {req, cmd, addr, wdata};
assign in1_m = {req2, cmd2, addr2, wdata2};
assign in0_s = {ack, rdata};
assign in1_s = {ack2, rdata2};

assign post_req = out0_m[65];
assign post_cmd = out0_m[64];
assign post_ack = ans1[32];
assign post_addr = out0_m[63:32];
assign post_wdata = out0_m[31:0];
assign post_rdata = ans1[31:0];

assign post_req2 = out1_m[65];
assign post_cmd2 = out1_m[64];
assign post_ack2 = ans2[32];
assign post_addr2 = out1_m[63:32];
assign post_wdata2 = out1_m[31:0];
assign post_rdata2 = ans2[31:0];

// assign statements (if any)                          
top_final i1 (
// port map - connection between master ports and signals/registers   
	.ans1(ans1),
	.ans2(ans2),
	.clk(clk),
	.in0_m(in0_m),
	.in0_s(in0_s),
	.in1_m(in1_m),
	.in1_s(in1_s),
	.out0_m(out0_m),
	.out1_m(out1_m),
	.reset(reset)
);

master master_1(.clk(clk),
					 .reset(reset),
					 .ack(post_ack),
					 .t_req(t_req),
					 .t_cmd(t_cmd),
					 .t_wdata(t_wdata),
					 .t_addr(t_addr),
					 .i_rdata(post_rdata),
					 .save_req(req),
					 .o_cmd(cmd),
					 .o_addr(addr),
					 .o_wdata(wdata));
					 
master master_2(.clk(clk),
					 .reset(reset),
					 .ack(post_ack2),
					 .t_req(t2_req),
					 .t_cmd(t2_cmd),
					 .t_wdata(t2_wdata),
					 .t_addr(t2_addr),
					 .i_rdata(post_rdata2),
					 .save_req(req2),
					 .o_cmd(cmd2),
					 .o_addr(addr2),
					 .o_wdata(wdata2));
					 
slave #(1'b0) slave_1(.clk(clk), 
				  .reset(reset), 
				  .ack(ack), 
				  .i_req(post_req), 
				  .i_cmd(post_cmd), 
				  .i_addr(post_addr), 
				  .i_wdata(post_wdata), 
				  .o_rdata(rdata));
				  
slave  #(1'b1) slave_2(.clk(clk), 
				  .reset(reset), 
				  .ack(ack2), 
				  .i_req(post_req2), 
				  .i_cmd(post_cmd2), 
				  .i_addr(post_addr2), 
				  .i_wdata(post_wdata2), 
				  .o_rdata(rdata2));

initial                                                
begin                                                  
                               
$display("Running testbench");
clk <= 0;
  reset <= 1;
  #10 reset <= 0;
	t2_addr<=0;
	t2_cmd<=0;
	t2_req<=0;
	t2_wdata<=0;
	t_addr<=0;
	t_cmd<=0;
	t_req<=0;
	t_wdata<=0;
#10 reset <= 1;
#20 @(posedge clk)
	t2_addr<=32'h80123987;
	t2_cmd<=1;
	t2_req<=1;
	t2_wdata<=1342;
	t_addr<=32'h79871234;
	t_cmd<=0;
	t_req<=1;
	t_wdata<=4213;
#10 @(posedge clk)
	t2_addr<=0;
	t2_cmd<=0;
	t2_req<=0;
	t2_wdata<=0;
	t_addr<=0;
	t_cmd<=0;
	t_req<=0;
	t_wdata<=0;
#100 @(posedge clk)
	t2_addr<=32'h70123987;
	t2_cmd<=1;
	t2_req<=1;
	t2_wdata<=7654;
	t_addr<=32'h79871234;
	t_cmd<=0;
	t_req<=1;
	t_wdata<=4213;
#10 @(posedge clk)
	t2_addr<=0;
	t2_cmd<=0;
	t2_req<=0;
	t2_wdata<=0;
	t_addr<=0;
	t_cmd<=0;
	t_req<=0;
	t_wdata<=0;
#100 @(posedge clk)
	t2_addr<=32'h80123987;
	t2_cmd<=0;
	t2_req<=1;
	t2_wdata<=7654;
	t_addr<=32'h89871234;
	t_cmd<=1;
	t_req<=1;
	t_wdata<=4213;
#10 @(posedge clk)
	t2_addr<=0;
	t2_cmd<=0;
	t2_req<=0;
	t2_wdata<=0;
	t_addr<=0;
	t_cmd<=0;
	t_req<=0;
	t_wdata<=0;
#100 @(posedge clk)
	t2_addr<=32'h80123987;
	t2_cmd<=1;
	t2_req<=1;
	t2_wdata<=7654;
#20 @(posedge clk)
	t_addr<=32'h79871234;
	t_cmd<=0;
	t_req<=1;
	t_wdata<=4213;
#10 @(posedge clk)
	t2_addr<=0;
	t2_cmd<=0;
	t2_req<=0;
	t2_wdata<=0;
	t_addr<=0;
	t_cmd<=0;
	t_req<=0;
	t_wdata<=0;	                      
end 
                                                   
always                                                 
                 
begin                                                  
 #5 clk <= ~clk;                                                                   
end                                                    
endmodule

module master (clk, reset, ack, t_req, t_cmd, t_wdata, t_addr, i_rdata, save_req, o_cmd, o_addr, o_wdata);

input clk, reset;
input ack;
input t_req, t_cmd;
input [31:0] i_rdata, t_wdata, t_addr;

output reg o_cmd;
output reg [31:0] o_addr, o_wdata;
reg o_req;

reg req, cmd;
reg [31:0] wdata, rdata, addr;

parameter IDLE = 2'b00, REQ = 2'b01, WAIT = 2'b10, READ = 2'b11;

reg [1:0] state, nextstate;
output wire save_req;
assign save_req = o_req & ~ack;

//assign o_req = ~ack & out_req;


always @*
begin
		case (state)
			IDLE: if(t_req) nextstate = REQ;
			REQ: nextstate = WAIT;
			WAIT:	begin 
				if(ack && ~o_cmd) nextstate = READ;
				else if(ack) nextstate = IDLE;
				else nextstate = WAIT;
			end
			READ: nextstate = IDLE;
			default: nextstate = IDLE;
		endcase
end

 

always @(posedge clk or negedge reset)
begin
	if(~reset) begin
		o_req <= 0;
		o_wdata <= 0;
		o_addr <= 0;
		o_cmd <= 0;
		wdata <= 0;
		addr <= 0;
		cmd <= 0;
		req <= 0;
	end
	else if(state == IDLE && t_req) begin
		wdata <= t_wdata;
		addr <= t_addr;
		cmd <= t_cmd;
		req <= t_req;
	end
	else if(state == REQ) begin
		o_req <= req;
		o_wdata <= wdata;
		o_addr <= addr;
		o_cmd <= cmd;
	end
	else if(state == WAIT && ack)
		o_req <= 0;
	else if(state == IDLE)begin
		o_req <= 0;
		o_wdata <= 0;
		o_addr <= 0;
		o_cmd <= 0;
	end
end

always @(posedge clk or negedge reset)
begin
	if(~reset)
		rdata <= 0;
	else if(state == READ)
		rdata <= i_rdata;
end

always @(posedge clk or negedge reset)
begin
	if(~reset)
		state <= IDLE;
	else
		state <= nextstate;
end

endmodule

module slave (clk, reset, ack, i_req, i_cmd, i_addr, i_wdata, o_rdata);

parameter ADDR = 1'b0;

input clk, reset;
input i_req, i_cmd;
input [31:0] i_wdata, i_addr;

output reg ack;
output reg [31:0] o_rdata;

reg cmd;
reg [31:0] wdata, addr;
reg [31:0] rdata;

parameter IDLE = 2'b00, ANS = 2'b01, WRITE = 2'b10;

reg [1:0] state, nextstate;
wire to_me;
assign to_me = i_addr[31] == ADDR;

always @*
begin
		case (state)
			IDLE: if(i_req & to_me) nextstate = ANS;
				else nextstate = IDLE;
			ANS: nextstate = WRITE;
			WRITE: nextstate = IDLE;
			default: nextstate = IDLE;
		endcase
end

//assign nextstate = ~state & i_req;
//assign rdata = 32'd1342;

always @(*)
begin
	
end


always @(posedge clk or negedge reset)
begin
	if(~reset) begin
		wdata <= 0;
		addr <= 0;
		cmd <= 0;
		ack <= 0;
		o_rdata <= 0;
		rdata <= 0;
	end
	else if(state == ANS) begin
		if(i_cmd)
			wdata <= i_wdata;
		addr <= i_addr;
		cmd <= i_cmd;
		ack <= 1;
	end
	else if(state == WRITE)begin
		ack <= 1;
		o_rdata <= rdata;
		rdata <= rdata + 1;
		end
	else
		ack <= 0;
end

always @(posedge clk or negedge reset)
begin
	if(~reset)
		state <= IDLE;
	else
		state <= nextstate;
end

endmodule

